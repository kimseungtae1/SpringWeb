<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://211.238.142.247/newlecture?autoReconnect=true&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8"/>
		<property name="username" value="sist"/>
		<property name="password" value="cclass"/>
	</bean>
	
	<!-- template을 이용하기 위한 설정 -->
	<bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Transcation을 처리하는 방법1 -->
	<!-- transaction처리를 위해 transactionManager가 먼저 가로채도록 하기 위한 설정 -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Transcation을 처리하는 방법2 -->
	<!-- transaction처리를 위한 템플릿사용(try-catch를 안하게 해주는 방법)-->
	<bean name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	 
	<!-- Transcation을 처리하는 방법3 -->
	<!-- AOP 이용하기 -->
	<bean name="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="insert" /> <!-- insert라는 이름을 가진 메서드만 트랜잭션 처리를 하겠다! -->
			</props>
		</property>
	</bean>
	
	<bean class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="noticeDao" />
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	 
	 <bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="dataSource" ref="dataSource"/>
	 	<property name="mapperLocations" value="classpath:com/newlecture/webapp/dao/mybatis/mapper/*.xml"/>
	 </bean>
	 
	 <bean class="org.mybatis.spring.SqlSessionTemplate">
	 	<constructor-arg index="0" ref="sqlSessionFactory"/>
	 </bean>
	 
	<!-- DAO 객체들 -->
	<bean class="com.newlecture.webapp.dao.spring.SpringMemberDao"/>
	<bean name="noticeDao" class="com.newlecture.webapp.dao.spring.SpringNoticeDao">
		<!-- <property name="template" ref="template" /> -->
	</bean>
	<!-- <bean class="com.newlecture.webapp.dao.mybatis.MyBatisNoticeDao"/> -->
	<bean class="com.newlecture.webapp.dao.mybatis.MybatisNoticeFileDao"/>
	
	<context:annotation-config />
</beans>
